runApp('eco')
runApp('eco')
runApp('eco')
library(deSolve)
LV <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dP <- rG * P * (1 - P/K) - rI * P * C
dC <- rI * P * C * AE - rM * C
return(list(c(dP, dC), sum = C+P))
})
}
parms <- c(rI = 0.2, rG = 1.0, rM = 0.2, AE = 0.5, K = 10)
yini <- c(P = 1, C = 2)
times <- seq(from = 0, to = 200, by = 1)
out <- ode(y = yini, times = times, func = LV, parms = parms)
out
matplot(out[ ,1], out[ ,2:4], type = "l", xlab = "time", ylab = "Conc",
main = "Lotka-Volterra", lwd = 2)
legend("topright", c("prey", "predator", "sum"), col = 1:3, lty = 1:3)
times <- seq(from = 0, to = 20, by = 1)
out <- ode(y = yini, times = times, func = LV, parms = parms)
matplot(out[ ,1], out[ ,2:4], type = "l", xlab = "time", ylab = "Conc",
main = "Lotka-Volterra", lwd = 2)
legend("topright", c("prey", "predator", "sum"), col = 1:3, lty = 1:3)
times <- seq(from = 0, to = 2000, by = 1)
out <- ode(y = yini, times = times, func = LV, parms = parms)
matplot(out[ ,1], out[ ,2:4], type = "l", xlab = "time", ylab = "Conc",
main = "Lotka-Volterra", lwd = 2)
times <- seq(from = 0, to = 200, by = 1)
out <- ode(y = yini, times = times, func = LV, parms = parms)
matplot(out[ ,1], out[ ,2:4], type = "l", xlab = "time", ylab = "Conc",
main = "Lotka-Volterra", lwd = 2)
out[1,]
out[1:5,]
LV <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dP <- rG * P * (1 - P/K) - rI * P * C
dC <- rI * P * C * AE - rM * C
return(list(c(dP, dC), sum = C+P))
})
}
## -----------------------------------------------------------------------------
## Define parameters and variables
## -----------------------------------------------------------------------------
parms <- c(rI = 0.2, rG = 1.0, rM = 0.2, AE = 0.5, K = 10)
yini <- c(P = 1, C = 2)
times <- seq(from = 0, to = 200, by = 1)
## -----------------------------------------------------------------------------
## Solve the ODEs
## -----------------------------------------------------------------------------
out <- ode(y = yini, times = times, func = LV, parms = parms)
out
out[2:4] * 10
out[,2:4] * 10
round(out[,2:4] * 10)
round(out[,2:4] * 10, 2)
out[,2:4] <- round(out[,2:4] * 10)
colnames(out)
out[time]
out[time == 0]
out[time == 0,]
out[out$time == 0,]
typeof(ou)
typeof(out)
out[,2:4] <- as.data.tablee(round(out[,2:4] * 10))
out[,2:4] <- as.data.table(round(out[,2:4] * 10))
library(data.table)
out <- ode(y = yini, times = times, func = LV, parms = parms)
out[,2:4] <- as.data.table(round(out[,2:4] * 10))
out
out <- ode(y = yini, times = times, func = LV, parms = parms)
out <- as.data.table(out)
out
out[,2:4] <- round(out[,2:4] * 10)
out
dt <- out[time == 1,]
dt
total <- dt[,sum]
total
groups <- c("P" = dt[,P], "C" = dt[,C])
groups
runApp('eco')
total
dt <- out[time == 0,]
total <- dt[,sum]
groups <- c("P" = dt[,P], "C" = dt[,C])
nodes <- data.frame(id = 1:total, group = groups)
total
groups
noes
nooodes
nodes
groups
runApp('eco')
dt
total <- dt[,sum]
groups <- c(rep("P", dt[, "P"]), rep("C", dt[, "C"]))
groups
table(groups)
total
nodes <- data.frame(id = 1:total, group = groups)
ndes
nodes
dt <- out[time == 2,]
total <- dt[,sum]
groups <- c(rep("P", dt[, "P"]), rep("C", dt[, "C"]))
nodes <- data.frame(id = 1:total, group = groups)
edges <- data.frame(from = c(1), to = c(1))
visNetwork(nodes, edges) %>%
visIgraphLayout()
dt <- out[time == 6,]
total <- dt[,sum]
groups <- c(rep("P", dt[, "P"]), rep("C", dt[, "C"]))
nodes <- data.frame(id = 1:total, group = groups)
edges <- data.frame(from = c(1), to = c(1))
tootal
total
groups
nodes <- data.frame(id = 1:total, group = groups)
table(groups)
38 + 39
total
out$sum <- out[, sum(2:3)]
out
out <- ode(y = yini, times = times, func = LV, parms = parms)
out <- as.data.table(out)
out[,2:3] <- round(out[,2:3] * 10)
out$sum <- out[, sum(2:3)]
out
out$sum <- sum(out$P, out$C)
out
out$sum <- out$P + out$C
out
runApp('eco')
runApp('eco')
runApp('eco')
?reactiveTimer
runApp('eco')
runApp('eco')
runApp('eco')
runApp('eco')
runApp('eco')
runApp('eco')
matrix(0, nrow = 10, ncol = 10)
matrix(0, nrow = 10000, ncol = 10000)
area <- matrix(0, nrow = 10000, ncol = 10000)
area <- matrix(0, nrow = 100000, ncol = 100000)
area <- matrix(0, nrow = 20, ncol = 20)
matrix(0, nrow = 20, ncol = 20)
pos <- list(x = 10, y = 10)
area[pos]
area[pos$x, pos$y]
area[pos$x, pos$y]
area[pos$x, pos$y] <- "x"
areea
area
area[x, y] <- "x"
area <- matrix(0, nrow = 20, ncol = 20)
x = 10
y = 20
area[x, y] <- "x"
area
area[x, y] <- "x"
area
area <- matrix(0, nrow = 20, ncol = 20)
x = 10
y = 20
area[x, y] <- 1
area
area[x, y]
area[10, 20]
area <- matrix(0, nrow = 20, ncol = 20)
x = 20
y = 10
area[x, y] <- 1
print(area)
area <- matrix('', nrow = 20, ncol = 20)
x = 20
y = 10
area[x, y] <- 'X'
print(area)
area <- matrix(' ', nrow = 20, ncol = 20)
x = 20
y = 10
area[x, y] <- 'X'
print(area)
?matrix
area <- matrix(' ', nrow = 20, ncol = 20, dimnames = c())
x = 20
y = 10
area[x, y] <- 'X'
print(area)
noquote(area)
dimnames(area)
dimnames(area) <- ""
dimnames(area) <- list("")
dimnames(area) <- list("", "")
dimnames(area) <- list(rep("", 20))
area
dimnames(area) <- list(rep("", 40))
dimnames(area) <- list(rep("", 20), rep("", 20))
area
area <- matrix(' ', nrow = 20, ncol = 20, dimnames = F)
area <- unname(noquote(matrix(' ', nrow = 20, ncol = 20)))
area
area <- noquote(unname(matrix(' ', nrow = 20, ncol = 20)))
area
area
matrix(' ', nrow = 20, ncol = 20)
unname(matrix(' ', nrow = 20, ncol = 20))
?unname
unname(matrix(' ', nrow = 20, ncol = 20), force = T)
area <- noquote(matrix(' ', nrow = 20, ncol = 20, list(rep("", 20), rep("", 20))))
area <- noquote(matrix(' ', nrow = 20, ncol = 20, dimnames = list(rep("", 20), rep("", 20))))
area
x = 20
y = 10
area[x, y] <- 'X'
print(area)
runif(1, 0, 1)
?runif
runif(1, 0, 1)*10
round(runif())
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
round(runif(1))
runif(1, -1, 1)
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
?Sys.sleep()
for(i in 1:10){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(40)
}
for(i in 1:10){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.4)
}
for(i in 1:10){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.4)
}
for(i in 1:10){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.1)
}
for(i in 1:10){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.01)
}
for(i in 1:100){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.01)
}
for(i in 1:100){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.001)
}
for(i in 1:100){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.05)
}
for(i in 1:100){
area[x, y] <- ' '
y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.1)
}
ymin = 1
ymax = 10
for(i in 1:100){
area[x, y] <- ' '
newpos <- y + round(runif(1, -1, 1))
if(newpos >= ymin & newpos <= ymax) y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.1)
}
x = 20
y = 10
area[x, y] <- 'X'
print(area)
area
newpos <- y + round(runif(1, -1, 1))
newpos
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
area <- noquote(matrix(' ', nrow = 20, ncol = 20, dimnames = list(rep("", 20), rep("", 20))))
x = 20
y = 10
area[x, y] <- 'X'
print(area)
ymin = 1
ymax = 10
for(i in 1:100){
area[x, y] <- ' '
newpos <- y + round(runif(1, -1, 1))
if(newpos >= ymin & newpos <= ymax) y = y + round(runif(1, -1, 1))
area[x, y] <- 'X'
print(area)
Sys.sleep(.1)
}
area
y = 1
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
newpos <- y + round(runif(1, -1, 1))
y
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
round(runif(1, -1, 1))
y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
area
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
movement('o')
area
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
movement('o')
areae
area
source('~/.active-rstudio-document')
area <- noquote(matrix(' ', nrow = 20, ncol = 20, dimnames = list(rep("", 20), rep("", 20))))
o.x = 20
o.y = 10
s.x = 20
s.y = 10
area[x, y] <- 'o'
print(area)
ymin = 1
ymax = 10
xmin = 1
xmax = 20
movement <- function(x, y, animal){
area[x, y] <- ' '
newpos.y <- y + round(runif(1, -1, 1))
newpos.x <- x + round(runif(1, -1, 1))
if(newpos.y >= ymin & newpos.y <= ymax)
y <- newpos.y
if(newpos.x >= xmin & newpos.x <= xmax)
x <- newpos.x
area[x, y] <- animal
return(list(x, y, area))
}
for(i in 1:100){
o <- movement(o.x, o.y, 'o')
area <- o$area
o.x <- o$x
o.y <- o$y
movement(s.x, s.y, 's')
area <- s$area
s.x <- s$x
s.y <- s$y
print(area)
Sys.sleep(.1)
}
x
y
source('~/.active-rstudio-document')
area
area <- noquote(matrix(' ', nrow = 20, ncol = 20, dimnames = list(rep("", 20), rep("", 20))))
area
o.x = 20
o.y = 10
s.x = 20
s.y = 10
area[x, y] <- 'o'
print(area)
ymin = 1
ymax = 10
xmin = 1
xmax = 20
area
o <- movement(o.x, o.y, 'o')
o
o[[1]]
o[[2]]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
s <- movement(s.x, s.y, 's')
s.x
s.y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/eco/evo.R')
shiny::runApp('eco')
runApp('eco')
?tableOutput
runApp('eco')
runApp('eco')
runApp('eco')
out[, .N] - 1
LV <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dP <- rG * P * (1 - P/K) - rI * P * C
dC <- rI * P * C * AE - rM * C
return(list(c(dP, dC), sum = C+P))
})
}
parms <- c(rI = 0.2, rG = 1.0, rM = 0.2, AE = 0.5, K = 10)
yini <- c(P = 1, C = 2)
times <- seq(from = 0, to = 200, by = 1)
out <- ode(y = yini, times = times, func = LV, parms = parms)
out <- as.data.table(out)
out[,2:3] <- round(out[,2:3] * 10)
out$sum <- out$P + out$C
maxiter = out[, .N] - 1
maxiter
runApp('eco')
out
runApp('eco')
visNetwork(nodes = data.frame(id = 1:30))
runApp('eco')
visNetwork(nodes = data.frame(id = 1:30)) %>% visIgraphLayout()
visNetwork(nodes = data.frame(id = 1:30)) %>% visIgraph()
runApp('eco')
shiny::runApp('eco')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
#pdesc <- data.table::fread("C://Users/martinry/protein_descriptions.txt")
pdesc <- data.table::fread("~/protein_descriptions.txt")
assign("pdesc", pdesc, envir = .GlobalEnv)
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
runApp('qodb-shiny')
.libPaths()
remove.packages("knee")
devtools::install_github('martinry/knee', auth_token = 'd6fb8fdfa3142624ba47f633b6c8c8a5cf008ad1')
runApp('qodb-shiny')
runApp('qodb-shiny')
setwd("~/martinry.github.io/")
blogdown:::serve_site()
