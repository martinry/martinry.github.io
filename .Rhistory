mex1
View(mex1)
ncol(mex1)
mex1$Accession <- mex1$Accession
mex1$Accession <- inner$Accession
data.table::setcolorder(mex1, c("Accession", names(mex1)[1:ncol(mex1)-1]))
mex1
View(mex1)
is.na(mex1)
table(is.na(mex1))
is.null(mex1)
mex1 == ""
table(mex1 == "")
mex1 == ""
mex1[mex1 == ""]
mex1[mex1 == "",]
which[mex1 == ""]
which(mex1 == ")
DT <- mydata %>%
transmute(Accession,
IL1 = rowSums(is.na(dplyr::select(., A))),
B = rowSums(is.na(dplyr::select(., B))))
# Outer ----
outer <- mydata[, grep("outer", names(mydata)), with = F]
outer$Accession <- mydata$Accession
data.table::setcolorder(outer, c("Accession", names(outer)[1:ncol(outer)-1]))
A <- names(mydata)[startsWith(names(mydata), "B1")]
B <- which(startsWith(names(mydata), "B2"))
C <- which(startsWith(names(mydata), "B3"))
library(dplyr)
DT <- mydata %>%
transmute(V1,
A = rowSums(is.na(dplyr::select(., A))),
B = rowSums(is.na(dplyr::select(., B))),
C = rowSums(is.na(dplyr::select(., C))))
shiny::runApp('C:/Users/martinry/qodb-shiny')
devtools::install_github('rstudio/shinyloadtest')
library(shinyloadtest)
rnorm(100, 5, 5)
as.matrix(rnorm(100, 5, 5))
mat2 = matrix(rnorm(10000*100), ncol = 100)
mat2
mat2 = matrix(rnorm(10000*100), ncol = 10)
mat2
mat2 = matrix(rnorm(10000*214), ncol = 10)
mat2
mat2 = matrix(rnorm(21400*100), ncol = 10)
mat2
mat2 = matrix(rnorm(21400*214), ncol = 10)
mat2
matrix(1:9, nrow = 214, ncol = 3)
214*3
matrix(1:642, nrow = 214, ncol = 3)
matrix(rnorm(642), nrow = 214, ncol = 3)
m <- matrix(rnorm(642), nrow = 214, ncol = 3)
for(i in seq_along(m)){
print(i)
}
nrow(m)
a <- matrix(c(91:95,1:25), ncol=6)
b <- matrix(NA,ncol=6,nrow=5)
a
a1 <- do.call(rbind,rep(list(a),n))
a1 <- do.call(rbind,rep(list(a),n))
apply(m, 2, function(x) x)
m
apply(m, 2, function(x) mean(x))
apply(m, 1, function(x) mean(x))
?seq()
seq(1:214, by 5)
seq(1:214, by = 5)
seq(1, 214, by = 5)
groups <- seq(rows, by = 5)
rows <- 214
columns <- 3
m <- matrix(rnorm(rows * columns),
nrow = rows,
ncol = columns)
groups <- seq(rows, by = 5)
groups <- seq(1:rows, by = 5)
groups <- seq(1, rows, by = 5)
groups
apply(m, 2, function(x) tapply(x, groups, mean))
?tapply
tapply(groups, groups, length)
tapply(m, groups, length)
for(i in 1:rows){
print(i)
}
m
for(i in 1:rows){
mean(m)
}
print(mean(m))
for(i in 1:rows){
print(mean(m))
}
for(i in 1:rows){
print(mean(m[i]))
}
for(i in 1:rows){
#print(mean(m[i]))
print(i)
}
for(i in 1:groups){
#print(mean(m[i]))
print(i)
}
groups
for(i in seq_along(groups)){
#print(mean(m[i]))
print(i)
}
groups
groups <- seq(rep(1, rows), by = 5)
rep(1, rows)
groups <- seq(1, rows, by = 5)
groups
shiny::runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
?ggplotly
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
library(igraph)
library(visNetwork)
# The labels, and corresponding node IDs
labels <- c("BMI", #							1
"Age", # 							2
"Sex", # 							3
"Comorbidities", # 					4
"Willingness to undergo surgery", # 5
"Pain intensity", # 				6
"Walking difficulties", # 			7
"Previous surgery", # 				8
"Education", # 						9
"Pain Self-Efficacy") # 			10
# IDs
ids <- 1:10
# Map arrows, each position in the "from" array corresponds to each position in the "to" array
edges <- data.frame(from = c(1, 1, 1,
2, 2, 2, 2, 2, 2,
3, 3,
4, 4, 4,
6, 6,
7,
8,
9, 9, 9, 9,
10, 10, 10),
to = c(5, 6, 7,
1, 3, 4, 5, 6, 7,
5, 6,
5, 7, 9,
5, 7,
5,
6,
4, 5, 7, 8,
5, 7, 8),
arrows = rep("to", 25)) # We want arrows for each edge = nrow(edges) = 25
nodes <- data.frame(id = 1:10,
label = labels,
#value = 1:10, 					# change individual sizes
# shape = rep("circle", 10),    # change shapes
color = c("red", "red", "red",  # node color according to its position in "labels"
"gray", "blue", "yellow",
"blue", "red", "red", "red"))
# Plot network
visNetwork(nodes, edges) %>%
visIgraphLayout(physics = F, smooth = F, layout = "layout_in_circle") %>%
visNodes(size = 20)
# IDs
ids <- 1:10
# Map arrows, each position in the "from" array corresponds to each position in the "to" array
edges <- data.frame(from = c(1, 1, 1,
2, 2, 2, 2, 2, 2,
3, 3,
4, 4, 4,
6, 6,
7,
8,
9, 9, 9, 9,
10, 10, 10),
to = c(5, 6, 7,
1, 3, 4, 5, 6, 7,
5, 6,
5, 7, 9,
5, 7,
5,
6,
4, 5, 7, 8,
5, 7, 8),
arrows = rep("to", 25)) # We want arrows for each edge = nrow(edges) = 25
nodes <- data.frame(id = 1:10,
label = labels,
#value = 1:10, 					# change individual sizes
# shape = rep("circle", 10),    # change shapes
color = c("red", "red", "red",  # node color according to its position in "labels"
"gray", "blue", "yellow",
"blue", "red", "red", "red"))
# Plot network
visNetwork(nodes, edges) %>%
visIgraphLayout(physics = F, smooth = F, layout = "layout_in_circle") %>%
visNodes(size = 20)
devtools::install_github(repo ='Olink-Proteomics/OlinkRPackage/OlinkAnalyze')
version("ggfortify")
version
install.packages("ggfortify")
install.packages("ggfortify")
install.packages("ggfortify")
devtools::install_github(repo ='Olink-Proteomics/OlinkRPackage/OlinkAnalyze')
version()
version
version
library(OlinkAnalyze)
devtools::install_github(repo ='Olink-Proteomics/OlinkRPackage/OlinkAnalyze')
install.packages(c("igraph", "visNetwork"))
install.packages("devtools")
shiny::runApp('C:/Users/martinry/dir_picker')
library(shinydashboard)
runApp('C:/Users/martinry/dir_picker')
install.packages("shinyFiles")
runApp('C:/Users/martinry/dir_picker')
runApp('C:/Users/martinry/dir_picker')
runApp('C:/Users/martinry/dir_picker')
runApp('C:/Users/martinry/dir_picker')
getVolumes()
getVolumes
getVolumes()
?shinyDirChoose
runApp('C:/Users/martinry/dir_picker')
shiny::runApp('C:/Users/martinry/electron-quick-start')
file.path("C:/")
runApp('C:/Users/martinry/electron-quick-start')
?parseDirPath
runApp('C:/Users/martinry/electron-quick-start')
?parseDirPath
runApp('C:/Users/martinry/electron-quick-start')
getVolumes()()
runApp('C:/Users/martinry/electron-quick-start')
system.file(package = 'base')
?shinyDirChoose
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
?modalDialog
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
fp
runApp('C:/Users/martinry/electron-quick-start')
topdirname
paste0(tags$p(tags$strong("doc")), " contains a description of the project.")
tags$p(paste0(tags$strong("doc"), " contains a description of the project."))
tags$p(
tags$strong("doc"),
"hello"
)
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
topdirname
basename(topdirname)
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
c("MS-DDA",
"MS-DIA",
"RNA-seq",
"Single Cell",
"MRI",
"Olink",
"Antibody",
"ELISA")
z <- c("MS-DDA",
"MS-DIA",
"RNA-seq",
"Single Cell",
"MRI",
"Olink",
"Antibody",
"ELISA")
sort(z)
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
?shinyFilesButton
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
rawfilenames
rawfilenames[1]
lengthrawfilenames[1]
length(rawfilenames[1])
length(rawfilenames[4])
rawfilenames[1]
as.character(rawfilenames[1])
rawfilenames[1][1]
rawfilenames[[1]]
?parseFilePaths
output$rawInputValue <- renderPrint({str(input$files)})
renderPrint({str(input$files)})
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
fp
infiles
fp
nrow(fp)
fp$size
runApp('C:/Users/martinry/electron-quick-start')
rawfp
rawfp$size
sum(rawfp$size)
sum(rawfp$size)/1000000
sum(rawfp$size)/1e6
sum(rawfp$size)/1e9
sum(rawfp$size)/1e6
runApp('C:/Users/martinry/electron-quick-start')
round(sum(rawfp$size)/1e6, 2)
runApp('C:/Users/martinry/electron-quick-start')
stepname <- "raw"
stepname
shinyFileChoose(input, stepname, roots = roots, session = session)
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
?shinyFilesButton
?parseFilePaths
rawfp
nrow(rawfp)
runApp('C:/Users/martinry/electron-quick-start')
rawfp
convertedfp
logsfp
steps <- c("rawfp", "convertedfp", "processedfp", "logsfp", "libfp")
steps[1]
exists(steps[1])
exists(steps[2])
exists(steps[3])
topresname
file.path(topresname, "data")
file.path(topresname, "raw")
if(exists( paste0(steps(i), "fp"))){
print(T)
}
steps <- c("raw", "converted", "processed", "logs", "lib")
for(i in seq_along(steps)){
if(exists( paste0(steps(i), "fp"))){
print(T)
}
}
for(i in seq_along(steps)){
if(exists( paste0(steps(i), "fp"))){
print(T)
}
for(i in seq_along(steps)){
if(exists( paste0(steps(i), "fp"))){
print(T)
}
}
steps <- c("raw", "converted", "processed", "logs", "lib")
for(i in seq_along(steps)){
if(exists( paste0(steps(i), "fp"))){
print(T)
}
}
steps <- c("raw", "converted", "processed", "logs", "lib")
for(i in seq_along(steps)){
if(exists( paste0(steps[i], "fp"))){
print(T)
}
}
steps <- c("raw", "converted", "processed", "logs", "lib")
for(i in seq_along(steps)){
if(exists( paste0(steps[i], "fp"))){
dest <- file.path(topresname, steps[i])
print(dest)
}
}
paste0(steps[i], "fp")
sourcename <- paste0(steps[i], "fp")
sourcename
call(sourcename)
get(sourcename)
i = 1
sourcename <- paste0(steps[i], "fp")
get(sourcename)
sourcepath <- get(sourcename)
sourcepath
sourcedf <- get(sourcename)
?file.copy
apply(sourcedf, 1, FUN = function(x) file.copy(from = x$datapath, to = destpath, overwrite = F, recursive = F))
sourcedf
sourcedf[4]
apply(sourcedf, 1, FUN = function(x) file.copy(from = x[4], to = destpath, overwrite = F, recursive = F))
destpath <- file.path(topresname, steps[i])
destpath
apply(sourcedf, 1, FUN = function(x) file.copy(from = x[4], to = destpath, overwrite = F, recursive = F))
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
runApp('C:/Users/martinry/electron-quick-start')
?file.rename
runApp('C:/Users/martinry/electron-quick-start')
topresname
wigert <- gsub(basename(topresname), "", topresname)
wigert
resname <- basename(topresname)
wigert <- gsub(rename, "", topresname)
wigert <- gsub(resname, "", topresname)
wigert
resname
wigert <- file.path(wigert, paste0("resname", "_wigert"))
wigert
resname <- basename(topresname)
wigert <- gsub(resname, "", topresname)
bmc <- file.path(wigert, paste0(resname, "_bmc"))
wigert <- file.path(wigert, paste0(resname, "_wigert"))
bmc
wigert
file.copy(wigert, bmc)
file.rename(topresname, wigert)
file.copy(wigert, bmc)
file.copy(wigert, bmc, overwrite = recursive)
file.copy(wigert, bmc, overwrite = "recursive")
file.copy(wigert, bmc, overwrite = T)
file.copy(wigert, bmc, overwrite = T, recursive = T)
bmc
wigert
file.copy(wigert, bmc)
file.copy(wigert, bmc, recursive = T)
dir.create(bmc)
file.copy(wigert, bmc, recursive = T)
file.copy(wigert, bmc, recursive = F)
bmc
wigert
file.path((.../), bmc)
file.path("...", bmc)
files <- list.files(path = wigert, full.names = TRUE, recursive = TRUE)
files
list.dirs()
dirs <- list.dirs(path = wigert, full.names = TRUE, recursive = TRUE)
dirs
for (f in dirs) file.copy(from = f, to = bmc)
dirs
for (f in dirs) print(f)
for (f in dirs) file.copy(from = f, to = bmc)
for (f in dirs) file.copy(from = f, to = bmc, recursive = T)
dirs
dirs <- dirs[-1]
dirs
resname <- basename(topresname)
wigert <- gsub(resname, "", topresname)
bmc <- file.path(wigert, paste0(resname, "_bmc"))
wigert <- file.path(wigert, paste0(resname, "_wigert"))
file.rename(topresname, wigert)
dir.create(bmc)
dirs <- list.dirs(path = wigert, full.names = TRUE, recursive = TRUE)
dirs <- dirs[-1]
for (f in dirs) file.copy(from = f, to = bmc, recursive = T)
topresname
wigert
topdirname
shell.exec(file.path(topdirname, "data"))
runApp('C:/Users/martinry/electron-quick-start')
?modalDialog
runApp('C:/Users/martinry/electron-quick-start')
shiny::runApp('C:/Users/martinry/qodb-shiny')
thiss
runApp('C:/Users/martinry/qodb-shiny')
group
runApp('C:/Users/martinry/qodb-shiny')
group
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
contrasts
samples
# Create Annotation data and expression set (Biobase)
phenoData <- new("AnnotatedDataFrame", data = samples)
exampleSet <- ExpressionSet(assayData = as.matrix(log2(dframe(maindata$data_wide, sampleinfo$sID))), phenoData = phenoData)
runApp('C:/Users/martinry/qodb-shiny')
cint
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
View(contrast)
runApp('C:/Users/martinry/qodb-shiny')
runApp('C:/Users/martinry/qodb-shiny')
knee::enrichment_results()
knee::enrichment_results
remove.packages("knee", lib="~/R/win-library/4.0")
devtools::install_github('martinry/knee', auth_token = "b908ed0b5f186846da6ecaa8b61e6542c75a9a92")
.libPaths()
shiny::runApp('C:/Users/martinry/qodb-shiny')
remove.packages("knee", lib="~/R/win-library/4.0")
devtools::install_github('martinry/knee', auth_token = "b908ed0b5f186846da6ecaa8b61e6542c75a9a92")
source('C:/Users/martinry/knee/R/volcano.R')
runApp('C:/Users/martinry/qodb-shiny')
knee
knee::volcano
setwd("C:/Users/martinry/")
setwd("C:/Users/martinry/martinry.github.io/")
blogdown::new_site(theme = 'jbub/ghostwriter')
