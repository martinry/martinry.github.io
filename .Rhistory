# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, k, lower.tail = F)
score
1 - score
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, 100, lower.tail = F)
1 - score
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, 10, lower.tail = F)
1 - score
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, 20, lower.tail = F)
1 - score
q
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, median_words, lower.tail = F)
score
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, k, lower.tail = F)
score
k
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, k, lower.tail = F)
score
q
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- 1 - phyper(q - 1, m, n - m, k, lower.tail = F)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, k, lower.tail = F)
score
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
q
k
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, k, lower.tail = F)
score
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, k, lower.tail = F)
q
k
response
score
1- score
-log10(p)
-log10(score)
-log10(1)
-log10(0)
-log10(0.01)
-log10(0.001)
-log10(0.0001)
-log10(0.00001)
h
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- phyper(q - 1, m, n - m, k, lower.tail = F)
score
1/score
1 / 0.00005
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- 1 - phyper(q - 1, m, n - m, k, lower.tail = F)
score
abs(median_words - k)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100
score <- score - abs(median_words - k)
score
# Slightly more sophisticated version of the quiz function
quiz <- function(protein = "random", reveal = T) {
if(protein == "random") {
# Select a random protein from our knowledgebase
protein <- wikitable[round(runif(1, 0, .N))]
} else {
# Capitilize word and try to find in dataframe
protein <- tolower(protein)
substr(protein, 1, 1) <- toupper(substr(protein, 1, 1))
protein <- wikitable[title == protein]
if(!protein$title %in% wikitable$title) {
# Throw error if name does not exist in df
stop("Could not find protein name")
}
}
# The background data: the words in the current protein's function summary
bg <- protein[,"protein_function"] %>%
clean()
# Number of words in bg
m <- length(bg)
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(median_words - k)
# Given 20 words to describe the protein,
# what is the probability of having 2 correct guesses
# considering a total
# The probability of out of 656 words (not accounting for -m)
# lower.tail = T is the same as writing 1 - phyper(...), hence we get the probability that q words are NOT randomly selected
# Note: The proper usage of phyper is with arguments: q-1, m, n-m, k
# However, by using k we give an unproportionally high score if the player is lazy and gives a short answer.
# Instead, we'll use the median number of words across all protein function descriptions
# as the expected length of the response.
# Also reveal answer?
answer <- ""
if(reveal) answer <- paste0("Answer: ", protein$protein_function)
# Rate score
if(score > 50){
print(paste("Good job! Your score:", score))
print(answer)
} else {
print(paste("Work harder! Your score:", score))
print(answer)
}
}
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin") cell
quiz(protein = "dermatopontin")
k
abs(median_words - k)
median_words
abs(median_words - k) * 1.5
abs(median_words - k) * 2
# Slightly more sophisticated version of the quiz function
quiz <- function(protein = "random", reveal = T) {
if(protein == "random") {
# Select a random protein from our knowledgebase
protein <- wikitable[round(runif(1, 0, .N))]
} else {
# Capitilize word and try to find in dataframe
protein <- tolower(protein)
substr(protein, 1, 1) <- toupper(substr(protein, 1, 1))
protein <- wikitable[title == protein]
if(!protein$title %in% wikitable$title) {
# Throw error if name does not exist in df
stop("Could not find protein name")
}
}
# The background data: the words in the current protein's function summary
bg <- protein[,"protein_function"] %>%
clean()
# Number of words in bg
m <- length(bg)
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(median_words - k) * 2
# Given 20 words to describe the protein,
# what is the probability of having 2 correct guesses
# considering a total
# The probability of out of 656 words (not accounting for -m)
# lower.tail = T is the same as writing 1 - phyper(...), hence we get the probability that q words are NOT randomly selected
# Note: The proper usage of phyper is with arguments: q-1, m, n-m, k
# However, by using k we give an unproportionally high score if the player is lazy and gives a short answer.
# Instead, we'll use the median number of words across all protein function descriptions
# as the expected length of the response.
# Also reveal answer?
answer <- ""
if(reveal) answer <- paste0("Answer: ", protein$protein_function)
# Rate score
if(score > 50){
print(paste("Good job! Your score:", score))
print(answer)
} else {
print(paste("Work harder! Your score:", score))
print(answer)
}
}
quiz(protein = "dermatopontin")
k
abs(median_words - k) * 2
(1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100
q
m
n
k
1 - phyper(q - 1, m, n - m, k, lower.tail = F)
phyper(q - 1, m, n - m, k, lower.tail = F)
words
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(median_words - k) * 3
score
# Slightly more sophisticated version of the quiz function
quiz <- function(protein = "random", reveal = T) {
if(protein == "random") {
# Select a random protein from our knowledgebase
protein <- wikitable[round(runif(1, 0, .N))]
} else {
# Capitilize word and try to find in dataframe
protein <- tolower(protein)
substr(protein, 1, 1) <- toupper(substr(protein, 1, 1))
protein <- wikitable[title == protein]
if(!protein$title %in% wikitable$title) {
# Throw error if name does not exist in df
stop("Could not find protein name")
}
}
# The background data: the words in the current protein's function summary
bg <- protein[,"protein_function"] %>%
clean()
# Number of words in bg
m <- length(bg)
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(median_words - k) * 3
# Given 20 words to describe the protein,
# what is the probability of having 2 correct guesses
# considering a total
# The probability of out of 656 words (not accounting for -m)
# lower.tail = T is the same as writing 1 - phyper(...), hence we get the probability that q words are NOT randomly selected
# Note: The proper usage of phyper is with arguments: q-1, m, n-m, k
# However, by using k we give an unproportionally high score if the player is lazy and gives a short answer.
# Instead, we'll use the median number of words across all protein function descriptions
# as the expected length of the response.
# Also reveal answer?
answer <- ""
if(reveal) answer <- paste0("Answer: ", protein$protein_function)
# Rate score
if(score > 50){
print(paste("Good job! Your score:", score))
print(answer)
} else {
print(paste("Work harder! Your score:", score))
print(answer)
}
}
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin") cell surface integrin binding protein
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin") cell surface integrin binding protein x xx xx
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(10 - k) * 3
scoree
score
k
# Slightly more sophisticated version of the quiz function
quiz <- function(protein = "random", reveal = T) {
if(protein == "random") {
# Select a random protein from our knowledgebase
protein <- wikitable[round(runif(1, 0, .N))]
} else {
# Capitilize word and try to find in dataframe
protein <- tolower(protein)
substr(protein, 1, 1) <- toupper(substr(protein, 1, 1))
protein <- wikitable[title == protein]
if(!protein$title %in% wikitable$title) {
# Throw error if name does not exist in df
stop("Could not find protein name")
}
}
# The background data: the words in the current protein's function summary
bg <- protein[,"protein_function"] %>%
clean()
# Number of words in bg
m <- length(bg)
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(10 - k) * 3
# Given 20 words to describe the protein,
# what is the probability of having 2 correct guesses
# considering a total
# The probability of out of 656 words (not accounting for -m)
# lower.tail = T is the same as writing 1 - phyper(...), hence we get the probability that q words are NOT randomly selected
# Note: The proper usage of phyper is with arguments: q-1, m, n-m, k
# However, by using k we give an unproportionally high score if the player is lazy and gives a short answer.
# Instead, we'll use the median number of words across all protein function descriptions
# as the expected length of the response.
# Also reveal answer?
answer <- ""
if(reveal) answer <- paste0("Answer: ", protein$protein_function)
# Rate score
if(score > 50){
print(paste("Good job! Your score:", score))
print(answer)
} else {
print(paste("Work harder! Your score:", score))
print(answer)
}
}
quiz(protein = "dermatopontin")
# Slightly more sophisticated version of the quiz function
quiz <- function(protein = "random", reveal = T) {
if(protein == "random") {
# Select a random protein from our knowledgebase
protein <- wikitable[round(runif(1, 0, .N))]
} else {
# Capitilize word and try to find in dataframe
protein <- tolower(protein)
substr(protein, 1, 1) <- toupper(substr(protein, 1, 1))
protein <- wikitable[title == protein]
if(!protein$title %in% wikitable$title) {
# Throw error if name does not exist in df
stop("Could not find protein name")
}
}
# The background data: the words in the current protein's function summary
bg <- protein[,"protein_function"] %>%
clean()
# Number of words in bg
m <- length(bg)
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(10 - k) * 10
# Given 20 words to describe the protein,
# what is the probability of having 2 correct guesses
# considering a total
# The probability of out of 656 words (not accounting for -m)
# lower.tail = T is the same as writing 1 - phyper(...), hence we get the probability that q words are NOT randomly selected
# Note: The proper usage of phyper is with arguments: q-1, m, n-m, k
# However, by using k we give an unproportionally high score if the player is lazy and gives a short answer.
# Instead, we'll use the median number of words across all protein function descriptions
# as the expected length of the response.
# Also reveal answer?
answer <- ""
if(reveal) answer <- paste0("Answer: ", protein$protein_function)
# Rate score
if(score > 50){
print(paste("Good job! Your score:", score))
print(answer)
} else {
print(paste("Work harder! Your score:", score))
print(answer)
}
}
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
# Slightly more sophisticated version of the quiz function
quiz <- function(protein = "random", reveal = T) {
if(protein == "random") {
# Select a random protein from our knowledgebase
protein <- wikitable[round(runif(1, 0, .N))]
} else {
# Capitilize word and try to find in dataframe
protein <- tolower(protein)
substr(protein, 1, 1) <- toupper(substr(protein, 1, 1))
protein <- wikitable[title == protein]
if(!protein$title %in% wikitable$title) {
# Throw error if name does not exist in df
stop("Could not find protein name")
}
}
# The background data: the words in the current protein's function summary
bg <- protein[,"protein_function"] %>%
clean()
# Number of words in bg
m <- length(bg)
# Prompt question to player
response <- readline(prompt = paste0("What do you know about ", protein, "?\t")) %>%
clean()
# Number of words in response which are also in bg
q <- length(response[response %in% bg])
# Total number of words in response
k <- length(response)
# What is the probability of randomly selecting q words, given:
# - q, the number of words in response which are also in m
# - m, the number of words in the protein's function summary
# - n, the total number of words in all proteins' function summaries
# - k, the number of words in response
score <- (1 - phyper(q - 1, m, n - m, k, lower.tail = F)) * 100 - abs(10 - k) * 7
# Given 20 words to describe the protein,
# what is the probability of having 2 correct guesses
# considering a total
# The probability of out of 656 words (not accounting for -m)
# lower.tail = T is the same as writing 1 - phyper(...), hence we get the probability that q words are NOT randomly selected
# Note: The proper usage of phyper is with arguments: q-1, m, n-m, k
# However, by using k we give an unproportionally high score if the player is lazy and gives a short answer.
# Instead, we'll use the median number of words across all protein function descriptions
# as the expected length of the response.
# Also reveal answer?
answer <- ""
if(reveal) answer <- paste0("Answer: ", protein$protein_function)
# Rate score
if(score > 50){
print(paste("Good job! Your score:", score))
print(answer)
} else {
print(paste("Work harder! Your score:", score))
print(answer)
}
}
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin") cell surface
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
quiz(protein = "dermatopontin")
